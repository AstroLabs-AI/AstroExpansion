package com.astrolabs.astroexpansion.common.config;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.config.ModConfigEvent;

@Mod.EventBusSubscriber(modid = com.astrolabs.astroexpansion.AstroExpansion.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class Config {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    
    // Energy Configuration
    public static final EnergyConfig ENERGY = new EnergyConfig(BUILDER);
    
    // Machine Configuration
    public static final MachineConfig MACHINES = new MachineConfig(BUILDER);
    
    // Ore Generation Configuration
    public static final OreGenConfig ORE_GEN = new OreGenConfig(BUILDER);
    
    // Multiblock Configuration
    public static final MultiblockConfig MULTIBLOCKS = new MultiblockConfig(BUILDER);
    
    // Research Configuration
    public static final ResearchConfig RESEARCH = new ResearchConfig(BUILDER);
    
    public static final ForgeConfigSpec SPEC = BUILDER.build();
    
    public static class EnergyConfig {
        public final ForgeConfigSpec.IntValue basicGeneratorCapacity;
        public final ForgeConfigSpec.IntValue basicGeneratorGeneration;
        public final ForgeConfigSpec.IntValue advancedGeneratorCapacity;
        public final ForgeConfigSpec.IntValue advancedGeneratorGeneration;
        public final ForgeConfigSpec.IntValue fusionReactorCapacity;
        public final ForgeConfigSpec.IntValue fusionReactorGeneration;
        public final ForgeConfigSpec.IntValue solarPanelGeneration;
        public final ForgeConfigSpec.IntValue solarPanelSpaceMultiplier;
        public final ForgeConfigSpec.IntValue energyStorageCapacity;
        public final ForgeConfigSpec.IntValue conduitTransferRate;
        public final ForgeConfigSpec.BooleanValue conduitEnergyLoss;
        public final ForgeConfigSpec.DoubleValue conduitLossPerBlock;
        
        EnergyConfig(ForgeConfigSpec.Builder builder) {
            builder.push("energy");
            
            basicGeneratorCapacity = builder
                .comment("Energy capacity of Basic Generator")
                .defineInRange("basicGeneratorCapacity", 10000, 1000, 1000000);
                
            basicGeneratorGeneration = builder
                .comment("FE/t generated by Basic Generator")
                .defineInRange("basicGeneratorGeneration", 40, 1, 10000);
                
            advancedGeneratorCapacity = builder
                .comment("Energy capacity of Advanced Generator")
                .defineInRange("advancedGeneratorCapacity", 50000, 1000, 1000000);
                
            advancedGeneratorGeneration = builder
                .comment("FE/t generated by Advanced Generator")
                .defineInRange("advancedGeneratorGeneration", 200, 1, 10000);
                
            fusionReactorCapacity = builder
                .comment("Energy capacity of Fusion Reactor")
                .defineInRange("fusionReactorCapacity", 10000000, 100000, 100000000);
                
            fusionReactorGeneration = builder
                .comment("FE/t generated by Fusion Reactor")
                .defineInRange("fusionReactorGeneration", 100000, 1000, 10000000);
                
            solarPanelGeneration = builder
                .comment("FE/t generated by Solar Panel during day")
                .defineInRange("solarPanelGeneration", 20, 1, 1000);
                
            solarPanelSpaceMultiplier = builder
                .comment("Multiplier for solar panel generation in space")
                .defineInRange("solarPanelSpaceMultiplier", 2, 1, 10);
                
            energyStorageCapacity = builder
                .comment("Energy capacity of Energy Storage block")
                .defineInRange("energyStorageCapacity", 1000000, 10000, 100000000);
                
            conduitTransferRate = builder
                .comment("FE/t transfer rate of Energy Conduits")
                .defineInRange("conduitTransferRate", 10000, 100, 1000000);
                
            conduitEnergyLoss = builder
                .comment("Enable energy loss in conduits over distance")
                .define("conduitEnergyLoss", false);
                
            conduitLossPerBlock = builder
                .comment("Percentage of energy lost per block (if enabled)")
                .defineInRange("conduitLossPerBlock", 0.01, 0.0, 0.1);
                
            builder.pop();
        }
    }
    
    public static class MachineConfig {
        public final ForgeConfigSpec.IntValue materialProcessorEnergy;
        public final ForgeConfigSpec.IntValue materialProcessorTime;
        public final ForgeConfigSpec.IntValue oreWasherEnergy;
        public final ForgeConfigSpec.IntValue oreWasherTime;
        public final ForgeConfigSpec.IntValue oreWasherWaterUsage;
        public final ForgeConfigSpec.IntValue componentAssemblerEnergy;
        public final ForgeConfigSpec.IntValue componentAssemblerTime;
        public final ForgeConfigSpec.IntValue industrialFurnaceEnergy;
        public final ForgeConfigSpec.IntValue industrialFurnaceTime;
        public final ForgeConfigSpec.DoubleValue industrialFurnaceSpeedMultiplier;
        public final ForgeConfigSpec.IntValue quantumComputerEnergy;
        public final ForgeConfigSpec.IntValue quantumComputerTime;
        public final ForgeConfigSpec.IntValue droneDockEnergy;
        public final ForgeConfigSpec.IntValue droneBatteryCapacity;
        
        MachineConfig(ForgeConfigSpec.Builder builder) {
            builder.push("machines");
            
            materialProcessorEnergy = builder
                .comment("FE/t consumed by Material Processor")
                .defineInRange("materialProcessorEnergy", 20, 1, 1000);
                
            materialProcessorTime = builder
                .comment("Processing time in ticks")
                .defineInRange("materialProcessorTime", 200, 20, 6000);
                
            oreWasherEnergy = builder
                .comment("FE/t consumed by Ore Washer")
                .defineInRange("oreWasherEnergy", 30, 1, 1000);
                
            oreWasherTime = builder
                .comment("Washing time in ticks")
                .defineInRange("oreWasherTime", 100, 20, 6000);
                
            oreWasherWaterUsage = builder
                .comment("mB of water consumed per operation")
                .defineInRange("oreWasherWaterUsage", 1000, 100, 10000);
                
            componentAssemblerEnergy = builder
                .comment("FE/t consumed by Component Assembler")
                .defineInRange("componentAssemblerEnergy", 50, 1, 1000);
                
            componentAssemblerTime = builder
                .comment("Assembly time in ticks")
                .defineInRange("componentAssemblerTime", 400, 20, 6000);
                
            industrialFurnaceEnergy = builder
                .comment("FE/t consumed by Industrial Furnace")
                .defineInRange("industrialFurnaceEnergy", 80, 1, 10000);
                
            industrialFurnaceTime = builder
                .comment("Base smelting time in ticks")
                .defineInRange("industrialFurnaceTime", 100, 20, 6000);
                
            industrialFurnaceSpeedMultiplier = builder
                .comment("Speed multiplier compared to vanilla furnace")
                .defineInRange("industrialFurnaceSpeedMultiplier", 4.0, 1.0, 10.0);
                
            quantumComputerEnergy = builder
                .comment("FE/t consumed by Quantum Computer")
                .defineInRange("quantumComputerEnergy", 1000, 10, 100000);
                
            quantumComputerTime = builder
                .comment("Research processing time in ticks")
                .defineInRange("quantumComputerTime", 600, 20, 12000);
                
            droneDockEnergy = builder
                .comment("FE/t consumed by Drone Dock while charging")
                .defineInRange("droneDockEnergy", 100, 1, 10000);
                
            droneBatteryCapacity = builder
                .comment("Energy capacity of drones")
                .defineInRange("droneBatteryCapacity", 50000, 1000, 1000000);
                
            builder.pop();
        }
    }
    
    public static class OreGenConfig {
        public final ForgeConfigSpec.BooleanValue generateTitanium;
        public final ForgeConfigSpec.IntValue titaniumVeinSize;
        public final ForgeConfigSpec.IntValue titaniumVeinsPerChunk;
        public final ForgeConfigSpec.IntValue titaniumMinHeight;
        public final ForgeConfigSpec.IntValue titaniumMaxHeight;
        
        public final ForgeConfigSpec.BooleanValue generateLithium;
        public final ForgeConfigSpec.IntValue lithiumVeinSize;
        public final ForgeConfigSpec.IntValue lithiumVeinsPerChunk;
        public final ForgeConfigSpec.IntValue lithiumMinHeight;
        public final ForgeConfigSpec.IntValue lithiumMaxHeight;
        
        public final ForgeConfigSpec.BooleanValue generateUranium;
        public final ForgeConfigSpec.IntValue uraniumVeinSize;
        public final ForgeConfigSpec.IntValue uraniumVeinsPerChunk;
        public final ForgeConfigSpec.IntValue uraniumMinHeight;
        public final ForgeConfigSpec.IntValue uraniumMaxHeight;
        
        public final ForgeConfigSpec.BooleanValue generateHelium3;
        public final ForgeConfigSpec.IntValue helium3VeinSize;
        public final ForgeConfigSpec.IntValue helium3VeinsPerChunk;
        
        OreGenConfig(ForgeConfigSpec.Builder builder) {
            builder.push("oreGeneration");
            
            builder.push("titanium");
            generateTitanium = builder
                .comment("Enable Titanium ore generation")
                .define("enable", true);
            titaniumVeinSize = builder
                .comment("Maximum vein size")
                .defineInRange("veinSize", 9, 1, 64);
            titaniumVeinsPerChunk = builder
                .comment("Veins per chunk")
                .defineInRange("veinsPerChunk", 8, 0, 100);
            titaniumMinHeight = builder
                .comment("Minimum generation height")
                .defineInRange("minHeight", 0, -64, 320);
            titaniumMaxHeight = builder
                .comment("Maximum generation height")
                .defineInRange("maxHeight", 56, -64, 320);
            builder.pop();
            
            builder.push("lithium");
            generateLithium = builder
                .comment("Enable Lithium ore generation")
                .define("enable", true);
            lithiumVeinSize = builder
                .comment("Maximum vein size")
                .defineInRange("veinSize", 7, 1, 64);
            lithiumVeinsPerChunk = builder
                .comment("Veins per chunk")
                .defineInRange("veinsPerChunk", 6, 0, 100);
            lithiumMinHeight = builder
                .comment("Minimum generation height")
                .defineInRange("minHeight", -64, -64, 320);
            lithiumMaxHeight = builder
                .comment("Maximum generation height")
                .defineInRange("maxHeight", 0, -64, 320);
            builder.pop();
            
            builder.push("uranium");
            generateUranium = builder
                .comment("Enable Uranium ore generation")
                .define("enable", true);
            uraniumVeinSize = builder
                .comment("Maximum vein size")
                .defineInRange("veinSize", 5, 1, 64);
            uraniumVeinsPerChunk = builder
                .comment("Veins per chunk")
                .defineInRange("veinsPerChunk", 3, 0, 100);
            uraniumMinHeight = builder
                .comment("Minimum generation height")
                .defineInRange("minHeight", -64, -64, 320);
            uraniumMaxHeight = builder
                .comment("Maximum generation height")
                .defineInRange("maxHeight", -32, -64, 320);
            builder.pop();
            
            builder.push("helium3");
            generateHelium3 = builder
                .comment("Enable Helium-3 ore generation on Moon")
                .define("enable", true);
            helium3VeinSize = builder
                .comment("Maximum vein size")
                .defineInRange("veinSize", 6, 1, 64);
            helium3VeinsPerChunk = builder
                .comment("Veins per chunk on Moon")
                .defineInRange("veinsPerChunk", 10, 0, 100);
            builder.pop();
            
            builder.pop();
        }
    }
    
    public static class MultiblockConfig {
        public final ForgeConfigSpec.BooleanValue showFormationHologram;
        public final ForgeConfigSpec.BooleanValue requireExactSize;
        public final ForgeConfigSpec.IntValue formationCheckInterval;
        
        MultiblockConfig(ForgeConfigSpec.Builder builder) {
            builder.push("multiblocks");
            
            showFormationHologram = builder
                .comment("Show hologram preview when multiblock is incomplete")
                .define("showFormationHologram", true);
                
            requireExactSize = builder
                .comment("Require exact multiblock size (no extra blocks)")
                .define("requireExactSize", false);
                
            formationCheckInterval = builder
                .comment("Ticks between multiblock formation checks")
                .defineInRange("formationCheckInterval", 20, 1, 200);
                
            builder.pop();
        }
    }
    
    public static class ResearchConfig {
        public final ForgeConfigSpec.IntValue baseResearchPoints;
        public final ForgeConfigSpec.DoubleValue researchPointMultiplier;
        public final ForgeConfigSpec.BooleanValue requireResearchForCrafting;
        public final ForgeConfigSpec.IntValue maxStoredPoints;
        
        ResearchConfig(ForgeConfigSpec.Builder builder) {
            builder.push("research");
            
            baseResearchPoints = builder
                .comment("Base research points from common items")
                .defineInRange("baseResearchPoints", 25, 1, 1000);
                
            researchPointMultiplier = builder
                .comment("Global research point multiplier")
                .defineInRange("researchPointMultiplier", 1.0, 0.1, 10.0);
                
            requireResearchForCrafting = builder
                .comment("Require research unlocks to craft advanced items")
                .define("requireResearchForCrafting", true);
                
            maxStoredPoints = builder
                .comment("Maximum research points a player can store")
                .defineInRange("maxStoredPoints", 100000, 1000, 10000000);
                
            builder.pop();
        }
    }
    
    @SubscribeEvent
    static void onLoad(final ModConfigEvent event) {
        // Config loaded/reloaded
    }
}